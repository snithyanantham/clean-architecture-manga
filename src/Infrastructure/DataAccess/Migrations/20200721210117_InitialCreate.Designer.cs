// <auto-generated />
using System;
using Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(MangaContext))]
    [Migration("20200721210117_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Infrastructure.DataAccess.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c510cfe-5d61-4a46-a3d9-c4313426655f"),
                            CustomerId = new Guid("197d0438-e04b-453d-b5de-eca05960c6ae")
                        });
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Entities.Credit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Credit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5117315-e789-491a-b662-958c37237f9b"),
                            AccountId = new Guid("4c510cfe-5d61-4a46-a3d9-c4313426655f"),
                            Currency = "USD",
                            TransactionDate = new DateTime(2020, 7, 21, 21, 1, 17, 178, DateTimeKind.Utc).AddTicks(6204),
                            Value = 400m
                        });
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("197d0438-e04b-453d-b5de-eca05960c6ae"),
                            FirstName = "Ivan Paulovich",
                            LastName = "Ivan Paulovich",
                            SSN = "8608179999",
                            UserId = new Guid("b6c5c4ff-b850-41d1-9e3a-89be72476835")
                        });
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Entities.Debit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Debit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d6032df-7a3b-46e6-8706-be971e3d539f"),
                            AccountId = new Guid("4c510cfe-5d61-4a46-a3d9-c4313426655f"),
                            Currency = "USD",
                            TransactionDate = new DateTime(2020, 7, 21, 21, 1, 17, 178, DateTimeKind.Utc).AddTicks(9632),
                            Value = 400m
                        });
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d3ed8166-af7f-4f55-8407-6d426d48dadf"),
                            ExternalUserId = "Ivan Paulovich"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
